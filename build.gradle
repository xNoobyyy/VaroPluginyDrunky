import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: "com.github.johnrengelman.shadow"

group 'de.varoplugin'
version '4.9.4'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDirs 'src'
        }

        resources {
            srcDirs 'resources'
        }
    }

    test {
        java {
            srcDirs 'test'
        }
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs 'libs'
    }

    maven {
        url 'https://repo.varoplugin.de/repository/maven-public/'
    }

    maven {
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    maven {
        url 'https://maven.enginehub.org/repo/'
    }

    maven {
        url 'https://m2.dv8tion.net/releases'
    }

    maven {
        url 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

configurations {
    internalLibs
    implementation.extendsFrom(internalLibs)
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.0')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.9.0')

    this.addModularImplementation('org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT', 'spigot', false)
    this.addModularCompile('com.googlecode.json-simple:json-simple:1.1.1', 'gson', false)
    this.addModularCompile('com.sk89q.worldedit:worldedit-bukkit:6.1.3-SNAPSHOT', 'worldedit', true)
    this.addModularCompile('com.github.labymod:legacy-labymod-server-api:1.0', 'labymodapi', true)
    this.addModularCompile('net.dv8tion:JDA:4.4.0_351', 'jda', false)
    this.addModularCompile('com.github.pengrad:java-telegram-bot-api:5.4.0', 'telegramapi', false)
    this.addModularCompile('me.clip:placeholderapi:2.10.10', 'placeholderapi', false)

    this.addModularInternal('de.varoplugin:CFW:0.6.18', 'CFW', true)
}

boolean checkLib(String filePath) {
    return file('libs/' + filePath + '.jar').exists()
}

void addModularCompile(String repoName, String fileName, boolean changingB) {
    if (this.checkLib(fileName))
        this.dependencies.compileOnly name: fileName
    else
        this.dependencies.compileOnly (repoName) { changing = changingB }
}

void addModularImplementation(String repoName, String fileName, boolean changingB) {
    if (this.checkLib(fileName))
        this.dependencies.implementation name: fileName
    else
        this.dependencies.implementation (repoName) { changing = changingB }
}

void addModularInternal(String repoName, String fileName, boolean changingB) {
    if (this.checkLib(fileName))
        this.dependencies.internalLibs name: fileName
    else
        this.dependencies.internalLibs (repoName) { changing = changingB }
}

tasks {

    shadowJar {
        classifier(null)
    }

    jar {
        archiveFileName = "VaroPlugin.jar"

        dependsOn(shadowJar)

        manifest {
            attributes(
                    'Manifest-Version': '1.0',
                    'Class-Path': '.',
                    'Main-Class': 'de.cuuky.varo.MainLauncher',
            )
        }
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        from (sourceSets.main.resources.srcDirs) {
            filter ReplaceTokens, tokens: [name: 'Varo']
            filter ReplaceTokens, tokens: [version: project.version]
            filter ReplaceTokens, tokens: [author: 'Cuuky']
        }
    }

    test {
        useJUnitPlatform()
    }


}